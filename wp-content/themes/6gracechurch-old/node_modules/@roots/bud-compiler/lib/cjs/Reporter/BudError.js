"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bud_support_1 = require("@roots/bud-support");
class BudError {
    constructor(statsError) {
        this.statsError = statsError;
        this.line = 0;
        this.column = 0;
        this.type = null;
        if (!statsError)
            return;
        this.source =
            statsError?.moduleName?.split('!').pop() ??
                statsError?.moduleIdentifier?.split('!').pop() ??
                null;
        this.setFile(this.source);
        this.message = statsError?.message ?? null;
    }
    hasType() {
        return typeof this.type === 'string';
    }
    getType() {
        return this.type;
    }
    setType(type) {
        this.type = type;
    }
    getFile() {
        return this.file;
    }
    setFile(file) {
        this.file = typeof file === 'function' ? file(this.file ?? '') : file;
        return this;
    }
    hasFile() {
        return typeof this.file === 'string';
    }
    getMessage() {
        return this.message;
    }
    setMessage(message) {
        this.message =
            typeof message === 'function' ? message(this.message ?? '') : message;
        return this;
    }
    hasMessage() {
        return typeof this.message === 'string';
    }
    getLine() {
        return this.line;
    }
    setLine(line) {
        this.line = typeof line === 'string' ? Number.parseInt(line) : line;
        return this;
    }
    hasLine() {
        return this.line !== 0;
    }
    getColumn() {
        return this.column;
    }
    setColumn(column) {
        this.column =
            typeof column === 'string' ? Number.parseInt(column) : column;
        return this;
    }
    hasColumn() {
        return this.column !== 0;
    }
}
__decorate([
    bud_support_1.bind
], BudError.prototype, "hasType", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "getType", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "setType", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "getFile", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "setFile", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "hasFile", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "getMessage", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "setMessage", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "hasMessage", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "getLine", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "setLine", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "hasLine", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "getColumn", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "setColumn", null);
__decorate([
    bud_support_1.bind
], BudError.prototype, "hasColumn", null);
exports.default = BudError;

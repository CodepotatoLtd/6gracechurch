"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dir = void 0;
const bud_support_1 = require("@roots/bud-support");
const node_path_1 = require("node:path");
class Dir {
    constructor(cwd) {
        this.cwd = cwd;
    }
    set(dir, path) {
        this[dir] = path;
        return this;
    }
    async check(path) {
        const exists = await bud_support_1.fs.pathExists(path);
        return exists ? path : false;
    }
    async setProject(path) {
        const check = await this.check((0, node_path_1.join)(path, 'package.json'));
        if (check)
            this.project = (0, node_path_1.dirname)(check);
        return this;
    }
    async find() {
        const cwd = await this.check(this.cwd);
        if (!cwd)
            throw new Error(`cwd not accessible: ${this.cwd}`);
        await this.setProject(this.cwd);
        if (this.project)
            return this;
        await bud_support_1.pkgUp.pkgUp({ cwd: this.cwd }).then(node_path_1.dirname).then(this.setProject);
        if (!this.project) {
            throw new Error(`Could not find project root (from cwd: ${this.cwd})`);
        }
        return this;
    }
}
__decorate([
    bud_support_1.bind
], Dir.prototype, "setProject", null);
__decorate([
    bud_support_1.bind
], Dir.prototype, "find", null);
exports.Dir = Dir;

"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const extension_1 = require("@roots/bud-framework/extension");
const decorators_1 = require("@roots/bud-framework/extension/decorators");
/**
 * Sass support extension for `@roots/bud-sass`
 *
 * @public
 * @decorator `@label`
 * @decorator `@dependsOn`
 */
let BudSass = class BudSass extends extension_1.Extension {
    /**
     * Sass implementation
     *
     * @returns Sass
     *
     * @public
     * @decorator `@bind`
     */
    async implementation() {
        try {
            const sass = await this.import('sass');
            this.logger.success('sass imported');
            return sass;
        }
        catch (e) {
            this.logger.error(e);
            throw new Error('sass not found. Install it with `yarn add sass --dev` or `npm i sass --save-dev`. This may be a problem with bud; please let us know what you experienced by filing an issue at https://github.com/roots/bud');
        }
    }
    /**
     * Register extension
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        const implementation = await this.implementation();
        this.app.hooks.on('build.resolve.extensions', ext => ext.add('.scss').add('.sass'));
        this.app.build
            .setLoader('sass', this.resolve('sass-loader'))
            .setItem('sass', {
            loader: 'sass',
            options: {
                implementation,
                sourceMap: true,
            },
        })
            .setRule('sass', {
            test: app => app.hooks.filter('pattern.sass'),
            include: [app => app.path('@src')],
            use: [`precss`, `css`, `postcss`, `resolveUrl`, `sass`],
        });
        this.app.postcss.syntax = 'postcss-scss';
    }
};
__decorate([
    decorators_1.bind
], BudSass.prototype, "implementation", null);
__decorate([
    decorators_1.bind
], BudSass.prototype, "register", null);
BudSass = __decorate([
    (0, decorators_1.label)('@roots/bud-sass'),
    (0, decorators_1.dependsOn)(['@roots/bud-postcss'])
], BudSass);
exports.default = BudSass;

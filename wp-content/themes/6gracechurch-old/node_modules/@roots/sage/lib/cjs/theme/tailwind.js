"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPalette = exports.toWordPressEntries = exports.transform = exports.getPalette = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isString } = bud_support_1.lodash;
const getPalette = async (path) => {
    const tailwindImport = await Promise.resolve().then(() => __importStar(require(path)));
    const tailwind = tailwindImport?.default ?? tailwindImport;
    return tailwind?.theme?.extend?.colors ?? {};
};
exports.getPalette = getPalette;
const name = label => label
    .map(label => `${label.charAt(0).toUpperCase()}${label.slice(1)}`)
    .join(' ');
const transform = (slug, color) => ({
    name: name(slug),
    slug: slug.join('-').toLowerCase(),
    color: color.toLowerCase(),
});
exports.transform = transform;
const toWordPressEntries = ([entry, path]) => {
    const [name, value] = entry;
    if (!isString(value)) {
        const result = Object.entries(value)
            .map(i => [i, [...path, name]])
            .flatMap(exports.toWordPressEntries);
        return result;
    }
    return [(0, exports.transform)([...path, name], value)];
};
exports.toWordPressEntries = toWordPressEntries;
const transformPalette = (palette) => Object.entries(palette ?? {})
    .map(i => [i, []])
    .flatMap(exports.toWordPressEntries);
exports.transformPalette = transformPalette;

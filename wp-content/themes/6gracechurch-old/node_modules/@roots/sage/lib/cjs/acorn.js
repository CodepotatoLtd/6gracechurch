"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hmrJson = exports.setPublicPath = exports.setManifestPublicPath = exports.setSvgEmit = void 0;
const event_compiler_close_1 = __importDefault(require("./hooks/event.compiler.close"));
const event_compiler_done_1 = __importDefault(require("./hooks/event.compiler.done"));
/**
 * Override output directory for svg assets
 * `@roots/bud-build` places them, by default, in `svg/`
 */
const setSvgEmit = ({ build }) => build.rules.svg.setGenerator(({ path, relPath }) => ({
    filename: relPath(path('@dist'), path('@dist/images/@name')),
}));
exports.setSvgEmit = setSvgEmit;
/**
 * Tell Acorn that assets have no `publicPath` even if bud is using one internally.
 * Acorn does its own `pulicPath` processing.
 *
 * Not setting an empty string will likely result in duplicative path segments
 * and unresolved assets.
 */
const setManifestPublicPath = ({ extensions }) => {
    extensions.get('@roots/bud-entrypoints').setOption('publicPath', '');
    extensions.get('webpack-manifest-plugin').setOption('publicPath', '');
};
exports.setManifestPublicPath = setManifestPublicPath;
/**
 * - If publicPath is `/` in production assets will not be locatable by Acorn.
 * - If publicPath is `''` in development bud's dev server will implode.
 * - If publicPath is the actual publicPath acorn will double up the path segments.
 */
const setPublicPath = ({ hooks, isDevelopment }) => hooks.on('build.output.publicPath', isDevelopment ? `/` : ``);
exports.setPublicPath = setPublicPath;
/**
 * Write hmr.json when compilation is finalized (only in development)
 * Remove this file when process is exited.
 */
const hmrJson = ({ isDevelopment, tap }) => isDevelopment &&
    [
        ({ hooks }) => hooks.action('event.compiler.success', event_compiler_done_1.default),
        ({ hooks }) => hooks.action('event.compiler.close', event_compiler_close_1.default),
    ].map(fn => tap(fn));
exports.hmrJson = hmrJson;

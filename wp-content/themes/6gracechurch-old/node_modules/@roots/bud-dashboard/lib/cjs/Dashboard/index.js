"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
const bud_framework_1 = require("@roots/bud-framework");
const bud_support_1 = require("@roots/bud-support");
const line_1 = require("./line");
const stats_1 = require("./stats");
/**
 * Dashboard service
 *
 * @public
 */
class Dashboard extends bud_framework_1.Service {
    constructor() {
        super(...arguments);
        this.progress = new line_1.Line();
        this.frame = '';
    }
    /**
     * @override
     */
    render(str) {
        this.app.context.stdout.write(str);
    }
    async register() {
        if (this.app.context.args.ci || this.app.env.has('TS_JEST')) {
            return;
        }
        this.render = bud_support_1.logUpdate.createLogUpdate(this.app.context.stdout);
        this.interval = setInterval(this.update, 80);
        this.app.hooks.action('event.app.close', async () => this.interval.unref());
    }
    update() {
        !this.progress.isComplete &&
            this.progress.frame &&
            this.render(this.progress.frame);
        return this;
    }
    /**
     * Run dashboard
     *
     * @public
     * @decorator `@bind`
     */
    stats({ stats, errors, warnings, }) {
        this.progress.complete(true);
        this.frame = this.app.context.args.ci
            ? this.app.compiler.stats.string.trim()
            : stats_1.reporter.report({ stats, errors, warnings, app: this.app });
        this.app.context.stdout.write(this.frame);
        return this;
    }
    /**
     * Progress callback
     *
     * @public
     * @decorator `@bind`
     */
    progressCallback(percent, scope) {
        try {
            this.percent = Math.ceil((percent ?? 0) * 100);
            this.progress.complete(this.percent >= 99);
            const update = scope.includes(`]`)
                ? scope.split(`]`).pop()?.trim()
                : scope;
            this.progress.update(`${this.percent}%`, update);
            this.update();
        }
        catch (error) {
            this.app.warn(error);
        }
    }
}
__decorate([
    bud_support_1.bind
], Dashboard.prototype, "render", null);
__decorate([
    bud_support_1.bind
], Dashboard.prototype, "register", null);
__decorate([
    bud_support_1.bind
], Dashboard.prototype, "update", null);
__decorate([
    bud_support_1.bind
], Dashboard.prototype, "stats", null);
__decorate([
    bud_support_1.bind
], Dashboard.prototype, "progressCallback", null);
exports.Dashboard = Dashboard;

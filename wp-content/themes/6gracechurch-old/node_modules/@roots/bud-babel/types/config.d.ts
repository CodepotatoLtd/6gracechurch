export declare type Options = {
    plugins?: Plugin[];
    config?: boolean | string;
};
export declare type NormalizedPlugin = [any, Record<string, any>];
export declare type Plugin = string | NormalizedPlugin | CallableFunction;
export declare type Registrable = string | NormalizedPlugin;
export interface Registry {
    [key: string]: [string, any?];
}
/**
 * Babel configuration
 *
 * @remarks
 * Configures plugins and presets for the Babel transpiler.
 *
 * @example
 * ```ts
 * bud.babel.setPreset(
 *   '@babel/preset-env',
 *   require.resolve('@babel/preset-env'),
 * )
 * ```
 *
 * @public
 */
export declare class Config {
    /**
     * Plugins registry
     *
     * @public
     */
    plugins: Registry;
    /**
     * Presets registry
     *
     * @public
     */
    presets: Registry;
    /**
     * Set a babel preset
     *
     * @param name - babel preset name
     * @param preset - path to the babel preset or the preset itself
     * @returns The babel configuration class
     *
     * @public
     */
    setPreset(name: string, preset: [string, any] | string): this;
    setPresets(presets: {
        [key: string]: [string, any] | string;
    }): this;
    unsetPreset(preset: string): this;
    setPresetOptions(preset: string, options: any): this;
    setPlugin(name: string, plugin: [any, any] | string): this;
    setPlugins(plugins: {
        [key: string]: [any, any] | string;
    }): this;
    unsetPlugin(plugin: string): this;
    setPluginOptions(plugin: string, options: any): this;
}
//# sourceMappingURL=config.d.ts.map
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const extension_1 = require("@roots/bud-framework/extension");
const decorators_1 = require("@roots/bud-framework/extension/decorators");
const config_1 = require("./config");
/**
 * Babel support for `@roots/bud`
 *
 * @public
 */
let BabelExtension = class BabelExtension extends extension_1.Extension {
    /**
     * Babel cache directory
     *
     * @public
     */
    get cacheDirectory() {
        return this.app.path(`@storage/cache/babel`);
    }
    /**
     * Babel env
     *
     * @public
     */
    get env() {
        return {
            development: {
                compact: false,
            },
        };
    }
    /**
     * Root directory
     *
     * @public
     */
    get root() {
        return this.app.path();
    }
    /**
     * Babel RuleSetItem callback
     *
     * @public
     * @decorator `@bind`
     */
    setRuleSetItem(ruleSetItem) {
        return ruleSetItem.setLoader('babel').setOptions(() => ({
            cacheDirectory: this.cacheDirectory,
            presets: Object.values(this.app.babel.presets),
            plugins: Object.values(this.app.babel.plugins),
            env: this.env,
            root: this.root,
        }));
    }
    /**
     * Initialize extension
     *
     * @public
     * @decorator `@bind`
     */
    async init() {
        Object.assign(this.app, { babel: new config_1.Config() });
    }
    /**
     * Register extension
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        this.app.build
            .setLoader('babel', this.resolve('babel-loader'))
            .setItem('babel', this.setRuleSetItem);
        this.app.build.rules.js.setUse(items => ['babel', ...items]);
        this.app.babel
            .setPresets({
            '@babel/preset-env': this.resolve('@babel/preset-env'),
        })
            .setPlugins({
            '@babel/plugin-transform-runtime': [
                this.resolve('@babel/plugin-transform-runtime'),
                { helpers: false },
            ],
            '@babel/plugin-proposal-object-rest-spread': this.resolve('@babel/plugin-proposal-object-rest-spread'),
            '@babel/plugin-syntax-dynamic-import': this.resolve('@babel/plugin-syntax-dynamic-import'),
            '@babel/plugin-proposal-class-properties': this.resolve('@babel/plugin-proposal-class-properties'),
        });
    }
};
__decorate([
    decorators_1.bind
], BabelExtension.prototype, "setRuleSetItem", null);
__decorate([
    decorators_1.bind
], BabelExtension.prototype, "init", null);
__decorate([
    decorators_1.bind
], BabelExtension.prototype, "register", null);
BabelExtension = __decorate([
    (0, decorators_1.label)('@roots/bud-babel')
], BabelExtension);
exports.default = BabelExtension;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.template = void 0;
const bud_support_1 = require("@roots/bud-support");
const path_1 = require("path");
const html_webpack_plugin_extension_1 = __importDefault(require("./html-webpack-plugin.extension"));
const interpolate_html_plugin_extension_1 = __importDefault(require("./interpolate-html-plugin.extension"));
const { dirname, join } = path_1.posix;
const template = async function (userOptions) {
    const app = this;
    if (userOptions === false) {
        app.hooks.on('feature.html', false);
        return app;
    }
    app.hooks.on('feature.html', true);
    /**
     * Add {@link BudHtmlWebpackPlugin} if it isn't already added
     */
    if (!app.extensions.has('html-webpack-plugin')) {
        await app.extensions.add(html_webpack_plugin_extension_1.default);
    }
    /**
     * Add {@link BudInterpolateHtmlPlugin} if it isn't already added
     */
    if (!app.extensions.has('interpolate-html-plugin')) {
        await app.extensions.add(interpolate_html_plugin_extension_1.default);
    }
    /**
     * If there were no options specified, we're done.
     */
    if (!userOptions || userOptions === true)
        return app;
    /**
     * Plugin references
     */
    const plugins = {
        html: app.extensions.get('html-webpack-plugin'),
        interpolate: app.extensions.get('interpolate-html-plugin'),
    };
    app.info('processing html-webpack-plugin options');
    plugins.html.setOptions(userOptions);
    if (!userOptions.template) {
        const manifest = await bud_support_1.pkgUp.pkgUp({
            cwd: require.resolve('@roots/bud-support'),
        });
        plugins.html.setOptions(options => ({
            ...options,
            template: join(dirname(manifest), 'templates/template.html'),
        }));
    }
    /**
     * If there were no replacements specified, we're done.
     */
    if (!userOptions.replace)
        return app;
    app.info('processing bud-interpolate-html-plugin options');
    plugins.interpolate.setOptions(userOptions.replace);
    return app;
};
exports.template = template;

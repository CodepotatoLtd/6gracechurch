"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateName = exports.hasValidConstructorName = exports.isPlugin = void 0;
const bud_support_1 = require("@roots/bud-support");
const { isEqual, isFunction } = bud_support_1.lodash;
/**
 * Returns true if extensions appears to be a Plugin constructor
 *
 * @param extension - Extension to check
 * @returns True if extension appears to be a Plugin constructor
 *
 * @example
 * ```ts
 * isPlugin(Plugin)
 * // => true
 * ```
 *
 * @internal
 */
const isPlugin = (extension) => extension.apply &&
    isFunction(extension.apply) &&
    !isEqual(extension.apply.toString(), '[native code]');
exports.isPlugin = isPlugin;
/**
 * Returns true if extensions appears to have a valid name
 *
 * @param extensions - Extensions to check
 * @returns True if extensions appears to have a valid name
 *
 * @example
 * ```ts
 * isValidName(new WebpackPlugin())
 * // => true
 * ```
 *
 * @internal
 */
const hasValidConstructorName = (input) => input?.constructor?.name &&
    typeof input.constructor.name == 'string' &&
    input.constructor.name !== 'default' &&
    input.constructor.name !== 'Object';
exports.hasValidConstructorName = hasValidConstructorName;
/**
 * Generates a unique name for extensions which do not
 * have a name prop or constructor name
 *
 * @param input - Extensions to check
 * @returns Unique name for extensions which do not
 * have a name prop or constructor name
 *
 * @example
 * ```ts
 * generateUniqueName(new WebpackPlugin())
 * // => 'x1240_234j__11f...'
 * ```
 *
 * @internal
 */
const generateName = (input) => (0, exports.hasValidConstructorName)(input) ? input.constructor.name : (0, bud_support_1.nanoid)(4);
exports.generateName = generateName;

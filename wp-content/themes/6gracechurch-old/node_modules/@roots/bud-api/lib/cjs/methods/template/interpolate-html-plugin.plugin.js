"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterpolateHtmlPlugin = void 0;
const bud_support_1 = require("@roots/bud-support");
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
/**
 * Template variable interpolation plugin for {@link webpack}
 *
 * @public
 */
class InterpolateHtmlPlugin {
    /**
     * Class constructor
     *
     * @param htmlWebpackPlugin - {@link HtmlWebpackPlugin}
     * @param replacements - {@link Record} of regular expressions
     *
     * @public
     */
    constructor(htmlWebpackPlugin, replacements) {
        this.htmlWebpackPlugin = htmlWebpackPlugin;
        this.replacements = replacements;
    }
    /**
     * {@link WebpackPluginInstance.apply}
     *
     * @public
     * @decorator `@bind`
     */
    apply(compiler) {
        compiler.hooks.compilation.tap('InterpolateHtmlPlugin', this.modifyHtmlWebpackPluginOptions);
    }
    /**
     * @param compilation - {@link Compilation}
     *
     * @public
     * @decorator `@bind`
     */
    modifyHtmlWebpackPluginOptions(compilation) {
        html_webpack_plugin_1.default.getHooks(compilation).afterTemplateExecution.tap('InterpolateHtmlPlugin', (data) => {
            Object.entries(this.replacements).forEach(([key, value]) => {
                data.html = data.html.replaceAll(new RegExp(`%${key}%`, 'g'), value);
            });
            return data;
        });
    }
}
__decorate([
    bud_support_1.bind
], InterpolateHtmlPlugin.prototype, "apply", null);
__decorate([
    bud_support_1.bind
], InterpolateHtmlPlugin.prototype, "modifyHtmlWebpackPluginOptions", null);
exports.InterpolateHtmlPlugin = InterpolateHtmlPlugin;

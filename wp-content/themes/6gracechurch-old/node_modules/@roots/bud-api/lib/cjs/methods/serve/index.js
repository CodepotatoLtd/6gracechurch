"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.method = void 0;
const bud_support_1 = require("@roots/bud-support");
/**
 * bud.serve
 * @public
 */
const method = async function (input) {
    const app = this;
    if (!app.isDevelopment)
        return app;
    const current = app.hooks.filter('dev.url');
    if (Array.isArray(input) || typeof input === 'number') {
        current.port = await requestPort(app, current, input);
        return app.hooks.on('dev.url', current);
    }
    if (input instanceof URL || typeof input === 'string') {
        const url = input instanceof URL ? input : new URL(input);
        url.port = await requestPort(app, url, Number(url.port ?? current.port));
        return app.hooks.on('dev.url', url);
    }
    await assignSpec(app, current, input);
    return app;
};
exports.method = method;
/**
 * Process specification object
 * @public
 */
const assignSpec = async (app, url, spec) => {
    if (!spec.options)
        spec.options = {};
    if ([spec.ssl, spec.cert, spec.key].filter(Boolean).length > 0) {
        url.protocol = 'https:';
    }
    if (spec.cert)
        spec.options.cert = await bud_support_1.fs.readFile(spec.cert);
    if (spec.key)
        spec.options.key = await bud_support_1.fs.readFile(spec.key);
    if (spec.port) {
        url.port = await requestPort(app, url, Number(url.port));
    }
    if (spec.host)
        url.hostname = spec.host;
    spec.options && app.hooks.on('dev.options', spec.options);
    app.hooks.on('dev.url', url);
};
/**
 * Process Node URL
 * @public
 */
const requestPort = async (app, url, request, exclude = []) => {
    const opts = {
        port: Array.isArray(request) ? request : [Number(request)],
        exclude: Array.isArray(exclude) ? exclude : [exclude],
    };
    url.port = await (0, bud_support_1.getPort)(opts).then(p => `${p}`);
    if (!opts.port.includes(Number(url.port))) {
        app.warn(`None of the requested ports could be resolved.`, `\n`, `A port was automatically selected: ${url.port}`, `\n`);
    }
    return url.port;
};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assets = exports.toWildcard = exports.appearsTupled = void 0;
const lodash_1 = require("lodash");
const path_1 = require("path");
const appearsTupled = (request) => (0, lodash_1.isArray)(request[0]) && (0, lodash_1.isArray)(request[0][0]);
exports.appearsTupled = appearsTupled;
const toWildcard = (pattern) => (0, path_1.normalize)(`${pattern}/**/*`);
exports.toWildcard = toWildcard;
const assets = async function assets(...request) {
    /**
     * tsc will complain about `this` context being lost
     * when destructuring bud even though the context of
     * this function will be bound.
     */
    const app = this;
    /**
     * Replace a leading dot with the project path
     */
    const fromDotRel = (pattern) => pattern?.startsWith('./') ? pattern.replace('./', app.path()) : pattern;
    /**
     * Take an input string and return a {@link CopyPlugin.ObjectPattern}
     */
    function makePatternObject(input) {
        /**
         * Process raw user input.
         *
         * - Replace leading dot with project path
         * - Append wildcard glob to directory requests
         */
        const from = fromDotRel(input);
        return {
            from: from,
            to: app.path('@name'),
            context: input.startsWith('/') ? undefined : app.path('@src'),
            noErrorOnMissing: true,
        };
    }
    /**
     * Handle tuple set
     *
     * @param tuple - [origin, destination]
     * @returns
     */
    const makeFromTo = (input) => {
        let [from, to] = input;
        /**
         * Process raw user input.
         *
         * - Replace leading dot with project path
         * - Append wildcard glob to directory requests
         */
        from = fromDotRel(from);
        return {
            from,
            to: to ? (0, path_1.join)(to, app.path('@name')) : app.path('@name'),
            context: app.path('@src'),
            noErrorOnMissing: true,
        };
    };
    /**
     * Parse a request item
     */
    const parse = (request) => {
        return (0, lodash_1.isString)(request) ? makePatternObject(request) : request;
    };
    if ((0, exports.appearsTupled)(request)) {
        app.extensions.get('copy-webpack-plugin').setOptions(options => ({
            ...(options ?? {}),
            patterns: [
                ...(options?.patterns ?? []),
                ...request.flat().map(makeFromTo),
            ],
        }));
        return app;
    }
    app.extensions.get('copy-webpack-plugin').setOptions(options => ({
        ...(options ?? {}),
        patterns: [...(options?.patterns ?? []), ...request.flat().map(parse)],
    }));
    return app;
};
exports.assets = assets;

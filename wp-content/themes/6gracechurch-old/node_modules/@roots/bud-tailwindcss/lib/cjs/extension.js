"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const extension_1 = require("@roots/bud-framework/extension");
const decorators_1 = require("@roots/bud-framework/extension/decorators");
/**
 * TailwindCSS support for `@roots/bud`
 *
 * @public
 * @decorator `@label`
 * @decorator `@dependsOn`
 */
let BudTailwindCss = class BudTailwindCss extends extension_1.Extension {
    /**
     * Register extension
     *
     * @decorator `@bind`
     */
    async register() {
        try {
            const { default: tailwindcss } = await this.import('tailwindcss');
            const { default: nesting } = await this.import('tailwindcss/nesting');
            this.app.postcss.setPlugins({
                'postcss-import': this.app.postcss.plugins.get('postcss-import'),
                'tailwindcss-nesting': [nesting],
                tailwindcss: [tailwindcss],
                'postcss-preset-env': this.app.postcss.plugins.get('postcss-preset-env'),
            });
            this.logger.success('postcss configured for tailwindcss');
        }
        catch (message) {
            this.logger.error(message);
        }
    }
};
__decorate([
    decorators_1.bind
], BudTailwindCss.prototype, "register", null);
BudTailwindCss = __decorate([
    (0, decorators_1.label)('@roots/bud-tailwindcss'),
    (0, decorators_1.dependsOn)(['@roots/bud-postcss'])
], BudTailwindCss);
exports.default = BudTailwindCss;

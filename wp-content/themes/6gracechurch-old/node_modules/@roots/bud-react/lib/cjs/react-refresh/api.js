"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactRefresh = void 0;
const bud_support_1 = require("@roots/bud-support");
const extension_1 = __importDefault(require("./extension"));
const reduceEntries = __importStar(require("./reducers"));
const { isFunction } = bud_support_1.lodash;
const reactRefresh = async function (userOptions) {
    const ctx = this;
    if (userOptions === false &&
        ctx.extensions.has('@pmmmwh/react-refresh-webpack-plugin')) {
        ctx.extensions.remove('@pmmmwh/react-refresh-webpack-plugin');
        ctx.hooks.on('build.entry', reduceEntries.remove);
        return ctx;
    }
    /**
     * Add entries
     */
    ctx.hooks.on('build.entry', reduceEntries.add);
    await ctx.extensions.add(extension_1.default);
    if (!userOptions || userOptions === true)
        return ctx;
    if (isFunction(userOptions)) {
        ctx.extensions
            .get('@pmmmwh/react-refresh-webpack-plugin')
            .setOptions(userOptions);
        return ctx;
    }
    ctx.extensions
        .get('@pmmmwh/react-refresh-webpack-plugin')
        .setOptions(options => ({ ...options, ...userOptions }));
    return ctx;
};
exports.reactRefresh = reactRefresh;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toml = exports.xml = exports.csv = exports.html = exports.yml = exports.json = exports.font = exports.svg = exports.webp = exports.image = exports.cssModule = exports.css = exports.js = void 0;
const bud_support_1 = require("@roots/bud-support");
/**
 * .js rule
 *
 * @public
 */
const js = (app) => app.build
    .makeRule()
    .setTest(({ hooks }) => hooks.filter('pattern.js'))
    .setInclude([app => app.path('@src')])
    .setUse([]);
exports.js = js;
/**
 * .css rule
 *
 * @public
 */
const css = (app) => app.build
    .makeRule()
    .setTest(({ hooks }) => hooks.filter('pattern.css'))
    .setInclude([app => app.path('@src')])
    .setUse([`precss`, `css`]);
exports.css = css;
/**
 * .module.css rule
 *
 * @public
 */
const cssModule = (app) => app.build
    .makeRule()
    .setTest(({ hooks }) => hooks.filter('pattern.cssModule'))
    .setInclude([app => app.path('@src')])
    .setUse([`precss`, `cssModule`]);
exports.cssModule = cssModule;
/**
 * .jpg, .jpeg, .png, .gif rule
 *
 * @public
 */
const image = (app) => app.build
    .makeRule()
    .setTest(({ hooks }) => hooks.filter('pattern.image'))
    .setInclude([app => app.path('@src')])
    .setType('asset/resource')
    .setGenerator(app => ({
    filename: app.hooks.filter('feature.hash')
        ? 'images/'
            .concat(app.hooks.filter('value.hashFormat'))
            .concat('[ext]')
        : 'images/'
            .concat(app.hooks.filter('value.fileFormat'))
            .concat('[ext]'),
}));
exports.image = image;
/**
 * .webp assets factorry
 *
 * @remarks
 * Returns {@link Rule} for `asset/resource`
 *
 * @public
 */
const webp = (app) => app.build
    .makeRule()
    .setTest(({ hooks }) => hooks.filter('pattern.webp'))
    .setInclude([app => app.path('@src')])
    .setType('asset/resource')
    .setGenerator(app => ({
    filename: app.hooks.filter('feature.hash')
        ? 'images/'
            .concat(app.hooks.filter('value.hashFormat'))
            .concat('[ext]')
        : 'images/'
            .concat(app.hooks.filter('value.fileFormat'))
            .concat('[ext]'),
}));
exports.webp = webp;
/**
 * Returns {@link Rule} for `.woff`/`.otf` handling
 * .svg rule
 *
 * @public
 */
const svg = (app) => app.build
    .makeRule()
    .setTest(({ hooks }) => hooks.filter('pattern.svg'))
    .setInclude([app => app.path('@src')])
    .setType('asset/resource')
    .setGenerator(app => ({
    filename: app.hooks.filter('feature.hash')
        ? 'svg/'
            .concat(app.hooks.filter('value.hashFormat'))
            .concat('[ext]')
        : 'svg/'
            .concat(app.hooks.filter('value.fileFormat'))
            .concat('[ext]'),
}));
exports.svg = svg;
/**
 * .woff, .woff2, .otf rule
 *
 * @public
 */
const font = (app) => app.build
    .makeRule()
    .setType('asset')
    .setTest(({ hooks }) => hooks.filter('pattern.font'))
    .setInclude([app => app.path('@src')])
    .setGenerator(app => ({
    filename: app.hooks.filter('feature.hash')
        ? 'fonts/'
            .concat(app.hooks.filter('value.hashFormat'))
            .concat('[ext]')
        : 'fonts/'
            .concat(app.hooks.filter('value.fileFormat'))
            .concat('[ext]'),
}));
exports.font = font;
/**
 * Returns {@link Rule} for `.jsonc` handling
 *
 * @public
 */
const json = (app) => app.build
    .makeRule()
    .setType('json')
    .setInclude([app => app.path()])
    .setExclude([app => app.path('@modules')])
    .setTest(({ hooks }) => hooks.filter('pattern.json'))
    .setParser({ parse: bud_support_1.json5.parse });
exports.json = json;
/**
 * Returns {@link Rule} for `.yml` / `.yaml` handling
 *
 * @public
 */
const yml = (app) => app.build
    .makeRule()
    .setInclude([app => app.path()])
    .setExclude([app => app.path('@modules')])
    .setTest(({ hooks }) => hooks.filter('pattern.yml'))
    .setUse(['yml']);
exports.yml = yml;
/**
 * Returns {@link Rule} for `.html` handling
 *
 * @public
 */
const html = (app) => app.build
    .makeRule()
    .setInclude([app => app.path()])
    .setExclude([app => app.path('@modules')])
    .setTest(({ hooks }) => hooks.filter('pattern.html'))
    .setUse([`html`]);
exports.html = html;
/**
 * Returns {@link Rule} for `.csv` handling
 *
 * @public
 */
const csv = (app) => app.build
    .makeRule()
    .setInclude([app => app.path()])
    .setExclude([app => app.path('@modules')])
    .setTest(({ hooks }) => hooks.filter('pattern.csv'))
    .setUse([`csv`]);
exports.csv = csv;
/**
 * Returns {@link Rule} for `.xml` handling
 *
 * @public
 */
const xml = (app) => app.build
    .makeRule()
    .setInclude([app => app.path()])
    .setExclude([app => app.path('@modules')])
    .setTest(({ hooks }) => hooks.filter('pattern.xml'))
    .setUse([`xml`]);
exports.xml = xml;
/**
 * Returns {@link Rule} for `.toml` handling
 *
 * @public
 */
const toml = (app) => app.build
    .makeRule()
    .setType('json')
    .setInclude([app => app.path()])
    .setExclude([app => app.path('@modules')])
    .setTest(({ hooks }) => hooks.filter('pattern.html'))
    .setParser({ parse: bud_support_1.toml.parse });
exports.toml = toml;

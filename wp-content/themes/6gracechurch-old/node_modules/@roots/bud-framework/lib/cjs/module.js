"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Module = void 0;
const bud_support_1 = require("@roots/bud-support");
const node_path_1 = require("node:path");
const { isArray, isString } = bud_support_1.lodash;
/**
 * Module resolver
 *
 * @public
 */
class Module {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
    }
    /**
     * @public
     * @decorator `@bind`
     */
    arr(request) {
        return (isString(request) ? [this.app.path(), request] : request).map(req => (isArray(req) ? req : [this.app.path(), req]));
    }
    /**
     * @public
     * @decorator `@bind`
     */
    reduceUntil(data, fn) {
        return data.reduce((a, c) => a ?? fn(...c), null);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    async path(candidates) {
        const manifest = await this.manifestPath(candidates);
        return (0, node_path_1.dirname)(manifest);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    async manifestPath(paths) {
        return await bud_support_1.pkgUp.pkgUp({ cwd: this.resolve(paths) });
    }
    /**
     * @public
     * @decorator `@bind`
     */
    async readManifest(paths) {
        const manifestPath = await this.manifestPath(paths);
        return await this.app.json.read(manifestPath);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    resolve(importPaths) {
        return this.reduceUntil(this.arr(importPaths), bud_support_1.resolveFrom.silent);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    import(importPaths) {
        const fn = bud_support_1.importFrom.silent;
        return this.reduceUntil(this.arr(importPaths), fn);
    }
    /**
     * @public
     * @decorator `@bind`
     */
    resolvePreferred(name, ...importPaths) {
        return this.resolve([
            name,
            ...importPaths.map((path) => [path, name]),
        ]);
    }
}
__decorate([
    bud_support_1.bind
], Module.prototype, "arr", null);
__decorate([
    bud_support_1.bind
], Module.prototype, "path", null);
__decorate([
    bud_support_1.bind
], Module.prototype, "manifestPath", null);
__decorate([
    bud_support_1.bind
], Module.prototype, "readManifest", null);
__decorate([
    bud_support_1.bind
], Module.prototype, "resolve", null);
__decorate([
    bud_support_1.bind
], Module.prototype, "import", null);
__decorate([
    bud_support_1.bind
], Module.prototype, "resolvePreferred", null);
exports.Module = Module;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Extension = void 0;
const bud_support_1 = require("@roots/bud-support");
class Extension {
    /**
     * @public
     */
    constructor(_app) {
        this._options = {};
        this.options = {};
        this.meta = {};
        this._app = () => _app;
        const logger = _app.logger.makeInstance({
            scope: this.label ?? 'anonymous extension',
        });
        Object.defineProperty(this, 'app', {
            get: (() => function () {
                return this._app();
            }.bind(this))(),
        });
        Object.defineProperty(this, 'logger', {
            get: (() => function () {
                return logger.scope(this.label ?? 'anonymous extension');
            }.bind(this))(),
        });
        const opts = this.options;
        Object.defineProperty(this, 'options', {
            get: this.getOptions,
            set: this.setOptions,
        });
        this.setOptions(opts);
    }
    async _init() {
        this.path = await this.app.module.path(this.label);
        if (this.init) {
            await this.init(this.options, this.app);
        }
    }
    async _register() {
        if (this.register) {
            await this.register(this.options, this.app);
        }
    }
    async _boot() {
        if (this.boot) {
            await this.boot(this.options, this.app);
        }
    }
    async _beforeBuild() {
        if (this.beforeBuild) {
            this.app.hooks.action('event.build.before', async () => await this.beforeBuild(this.options, this.app));
        }
    }
    async _make() {
        const enabled = await this.isEnabled();
        if (enabled === false || (!this.make && !this.apply && !this.plugin))
            return false;
        if (this.plugin)
            return new this.plugin(this.options);
        if (this.apply)
            return this;
        return await this.make();
    }
    getOptions() {
        return Object.entries(this._options).reduce(this.fromOptionsMap, {});
    }
    setOptions(value) {
        this._options = bud_support_1.lodash.isFunction(value) ? value(this.options) : value;
        return this;
    }
    getOption(key) {
        return this.options[key];
    }
    setOption(key, value) {
        this._options[key] = bud_support_1.lodash.isFunction(value) ? value : () => value;
        return this;
    }
    toOptionsMap(funcMap = {}, [key, value]) {
        return {
            ...funcMap,
            [key]: bud_support_1.lodash.isFunction(value) ? value : () => value,
        };
    }
    fromOptionsMap(options, [key, value]) {
        return {
            ...(options ?? {}),
            [key]: bud_support_1.lodash.isFunction(value) ? value(this.app) : value,
        };
    }
    fromObject(extensionObject) {
        Object.entries(extensionObject).map(([k, v]) => {
            this[k] = v;
        });
        return this;
    }
    has(key) {
        return bud_support_1.lodash.has(this, key);
    }
    isFunction(key) {
        return bud_support_1.lodash.isFunction(this[key]) ? true : false;
    }
    /**
     * @public
     */
    resolve(packageName) {
        const result = this.app.module.resolvePreferred(packageName, this.path);
        this.logger.log('resolved', packageName, 'to', result);
        return result;
    }
    /**
     * @public
     */
    async import(packageName) {
        try {
            const result = await Promise.resolve().then(() => __importStar(require(this.resolve(packageName))));
            this.logger.log('imported', packageName);
            return result;
        }
        catch (error) {
            this.app.error(error);
        }
    }
    disable() {
        this.when = async () => false;
    }
    enable() {
        this.when = async () => true;
    }
    /**
     * Value determining if the extension should be utilized
     *
     * @public
     */
    async isEnabled() {
        if (this.when)
            return await this.when(this.options ?? {}, this.app);
        return true;
    }
    done() {
        return this.app;
    }
}
__decorate([
    bud_support_1.bind
], Extension.prototype, "_init", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "_register", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "_boot", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "_beforeBuild", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "_make", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "getOptions", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "setOptions", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "getOption", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "setOption", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "toOptionsMap", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "fromOptionsMap", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "fromObject", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "has", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "isFunction", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "resolve", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "import", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "disable", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "enable", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "isEnabled", null);
__decorate([
    bud_support_1.bind
], Extension.prototype, "done", null);
exports.Extension = Extension;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lifecycle = void 0;
const __1 = require("..");
const methods = __importStar(require("../methods"));
const module_1 = require("../module");
const Process = __importStar(require("../process"));
const constants_1 = require("./constants");
/**
 * Initializes and binds {@link Bud.services}
 *
 * @example
 * ```js
 * new BudImplementation(...constructorParams).bootstrap()
 * ```
 *
 * @param this - {@link Bud}
 * @returns Bud
 *
 * @public
 */
async function lifecycle(options) {
    this.options = { ...options };
    this.module = new module_1.Module(this);
    this.children = {};
    Object.entries(methods).map(([key, method]) => {
        this[key] = method.bind(this);
    });
    if (!this.isRoot)
        Process.initialize(this);
    this.logger = new __1.Logger(this);
    const initialized = Object.entries({ ...this.options.services })
        .filter(([name]) => this.isDevelopment || !constants_1.DEVELOPMENT_SERVICES.includes(name))
        .filter(([name]) => this.isRoot || !constants_1.PARENT_SERVICES.includes(name))
        .map(([name, Service]) => {
        this.log('initializing', name);
        this[name] = new Service(this);
        return this[name];
    });
    await constants_1.LIFECYCLE_EVENTS.reduce(async (promised, event) => {
        await promised;
        await Promise.all(initialized
            .filter(service => service[event])
            .map(service => [service, service[event].bind(service)])
            .map(async ([service, callback]) => {
            try {
                await callback(this);
                this.success({
                    message: event,
                    suffix: service.constructor.name.toLowerCase(),
                });
            }
            catch (err) {
                this.error(`Error executing`, event, `for service`, service.constructor.name.toLowerCase(), `\n`, err);
            }
        }));
        return Promise.resolve();
    }, Promise.resolve());
    return this;
}
exports.lifecycle = lifecycle;

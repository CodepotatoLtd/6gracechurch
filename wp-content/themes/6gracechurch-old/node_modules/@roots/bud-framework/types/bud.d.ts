import { HighlightOptions, PrettyFormatOptions } from '@roots/bud-support';
import { parsers } from '@roots/bud-support';
import { Api, Build, Cache, Compiler, Config, Dashboard, Env, Extensions, Hooks, Logger, Project, Server, Services } from '.';
import { lifecycle } from './lifecycle';
import * as methods from './methods';
import { Module } from './module';
/**
 * Framework abstract
 *
 * @public
 */
export declare abstract class Bud {
    implementation: Constructor;
    /**
     * Options
     *
     * @internal
     * @virtual
     */
    options: Config.Options;
    /**
     * Context
     *
     * @readonly
     * @public
     */
    get context(): Config.Context;
    /**
     * Compilation mode
     *
     * @remarks
     * Either `production` or `development`.
     *
     * @readonly
     * @defaultValue `production`
     * @public
     */
    get mode(): 'development' | 'production';
    /**
     * Name
     *
     * @readonly
     * @public
     */
    get name(): string;
    /**
     * Parent {@link Bud} instance
     *
     * @readonly
     * @public
     */
    get root(): Bud;
    /**
     * True when {@link Bud.mode} is `production`
     *
     * @public
     */
    get isProduction(): boolean;
    /**
     * True when {@link Bud.mode} is `development`
     *
     * @public
     */
    get isDevelopment(): boolean;
    /**
     * True when current instance is the parent instance
     *
     * @readonly
     * @public
     */
    get isRoot(): boolean;
    /**
     * True when current instance is a child instance
     *
     * @readonly
     * @public
     */
    get isChild(): boolean;
    /**
     * {@link Bud} instances
     *
     * @public
     */
    children: Record<string, Bud>;
    /**
     * True when child compilers
     *
     * @readonly
     * @public
     */
    get hasChildren(): boolean;
    /**
     * Bud services
     *
     * @public
     */
    services: Services.Registry;
    /**
     * Macros for assisting with common config tasks
     *
     * @public
     */
    api: Api.Service;
    /**
     * Config builder service
     *
     * @public
     */
    build: Build.Service;
    /**
     * Caching service
     *
     * @public
     */
    cache: Cache.Service;
    /**
     * Compiler service
     *
     * @public
     */
    compiler: Compiler.Service;
    /**
     * CLI dashboard service.
     *
     * @public
     */
    dashboard: Dashboard.Service;
    /**
     * Envvar service
     *
     * @public
     */
    env: Env.Service;
    /**
     * Extensions service
     *
     * @public
     */
    extensions: Extensions.Service;
    /**
     * Hooks service
     *
     * @public
     */
    hooks: Hooks.Service;
    /**
     * Project information
     *
     * @public
     */
    project: Project.Service;
    /**
     * Logging service
     *
     * @public
     */
    logger: Logger;
    /**
     * Import / resolve utility
     *
     * @public
     */
    module: Module;
    /**
     * Development server
     *
     * @public
     */
    server: Server.Service;
    lifecycle: lifecycle;
    maybeCall: methods.maybeCall;
    close: methods.close;
    container: methods.container;
    get: methods.get;
    glob: methods.glob;
    globSync: methods.globSync;
    make: methods.make;
    path: methods.path;
    pipe: methods.pipe;
    publicPath: methods.publicPath;
    relPath: methods.relPath;
    setPath: methods.setPath;
    setPublicPath: methods.setPublicPath;
    sequence: methods.sequence;
    sequenceSync: methods.sequenceSync;
    tap: methods.tap;
    tapAsync: methods.tapAsync;
    when: methods.when;
    bindMethod: methods.bindMethod;
    /**
     * Read and write json files
     *
     * @public
     */
    json: typeof parsers.json5;
    /**
     * Read and write yaml files
     *
     * @public
     */
    yml: typeof parsers.yml;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(implementation: Constructor);
    /**
     * Factory
     *
     * @public
     */
    factory(options?: Config.Options): Promise<Bud>;
    /**
     * Log a message
     *
     * @public
     * @decorator `@bind`
     */
    log(...messages: any[]): this;
    /**
     * Log an `info` level message
     *
     * @public
     * @decorator `@bind`
     */
    info(...messages: any[]): this;
    /**
     * Log a `success` level message
     *
     * @public
     * @decorator `@bind`
     */
    success(...messages: any[]): this;
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    warn(...messages: any[]): this;
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    await(...messages: any[]): this;
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    complete(...messages: any[]): this;
    /**
     * Log and display a debug message.
     *
     * @public
     * @decorator `@bind`
     */
    debug(...messages: any[]): void;
    /**
     * Log and display an error.
     *
     * @remarks
     * In `production` this error is treated as fatal
     * and will kill the process.
     *
     * @public
     * @decorator `@bind`
     */
    error(...messages: any[]): void;
    /**
     * Dump object and return Bud
     */
    dump(obj: any, options?: PrettyFormatOptions & HighlightOptions & {
        prefix: string;
    }): Bud;
    /**
     * timer util
     *
     * @public
     */
    _hrtime: [number, number];
    _hrdone: number;
    /**
     * timer diff
     *
     * @public
     * @decorator `@bind`
     */
    _hrdiff(): number;
}
/**
 * Bud Constructor
 */
export declare type Constructor = new (implementation: Constructor) => Bud;
//# sourceMappingURL=bud.d.ts.map